" ── vim setup ─────────────────────────────────────────────────────────────────
if empty(glob('~/.vim/autoload/plug.vim'))
		    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
			     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
   \| PlugInstall --sync | source $MYVIMRC
   \| endif


" ── plugin's list ─────────────────────────────────────────────────────────────
call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'yggdroot/indentline'
Plug 'preservim/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'morhetz/gruvbox'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'sheerun/vim-polyglot'
Plug 'airblade/vim-gitgutter'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'
Plug 'voldikss/vim-floaterm'
Plug 'drzel/vim-line-no-indicator'
Plug 'hrsh7th/vim-vsnip'							
Plug 'hrsh7th/vim-vsnip-integ'						
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

call plug#end()


" ── lightline settings ────────────────────────────────────────────────────────
let g:lightline#bufferline#show_number=1
let g:lightline#bufferline#enable_devicons=1
let g:lightline#bufferline#show_single_buffer=1

let g:line_no_indicator_chars = [
  \  ' ', '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█'
  \  ]

let g:lightline = {
    \ 'colorscheme' : 'gruvbox',
    \ 'active' : {
    \   'left' : [ [ 'mode', 'paste'],
    \ 		       [ 'gitbranch','readonly', 'filename']],
    \   'right' :  [ ['lineinfo'],
    \              [ 'linenoindicator' ],
    \              [ 'fileformat' ],
    \              [ 'fileencoding' ],
    \              [ 'filetype' ]]
    \ },
    \ 'component_function' : {
    \   'filetype': 'MyFiletype',
    \   'fileformat': 'MyFileformat',
    \   'filename': 'LightlineFilename',
    \   'readonly': 'LightLineReadonly',
    \   'linenoindicator'  : 'LineNoIndicator',
    \   'gitbranch': 'FugitiveHead',
    \   'mode'  : 'LightlineMode',
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers',
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel',
	  \ },
    \ 'tabline': {
	  \   'left': [ ['buffers'] ],
    \   'right': [['currentfunction']]
	  \ }
    \ }

function! LightlineMode()
  return lightline#mode()
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightlineFilename()
  let modified = &modified ? '+' : ''
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:] . modified
  endif
  return expand('%') . modified
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update() 	 


" ── keybinds ──────────────────────────────────────────────────────────────────
map <silent> <F6> :NERDTreeToggle<CR>
nnoremap <silent> <F5> :FloatermToggle<CR>
tnoremap <silent> <F5> <C-\><C-n>:FloatermToggle<CR>
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-b> :Buffers<CR>
nnoremap <silent> <C-g> :Rg<CR>
nnoremap <leader>y :w !xclip -selection clipboard<CR><CR>
vnoremap <leader>y :w !xclip -selection clipboard<CR><CR>


" ── startify settings ─────────────────────────────────────────────────────────
let g:webdevicons_enable_startify = 1
let g:startify_padding_left = 3
let g:startify_session_delete_buffers = 1
let g:startify_relative_path = 1
let g:startify_files_number = 6

let g:startify_bookmarks = [
      \ {'b': '~/.bashrc'},
      \ {'v': '~/.vim/vimrc'},
      \ ]

let g:startify_lists = [
      \ { 'type': 'bookmarks', 'header': ["  bookmarks"]      },
      \ { 'type': 'files',     'header': ["  mru files"]            },
      \ { 'type': 'dir',       'header': ["  mru files in " . getcwd()] },
      \ { 'type': 'commands',  'header': ["  commands"]       },
      \ ]

function! Startifyentryformat()
  return 'webdeviconsgetfiletypesymbol(absolute_path) ." ". entry_path'
endfunction


" ── colorscheme settings ──────────────────────────────────────────────────────
colorscheme gruvbox
let theme_mode = getenv('THEME_MODE')

if theme_mode ==# 'dark'
	highlight ColorColumn ctermbg=235 guibg=#3c3836
	set background=dark
else
	highlight ColorColumn ctermbg=235 guibg=#ebdbb2
	set background=light
endif

 if exists('+termguicolors')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
 endif

highlight ColorColumn ctermbg=244 guibg=#928374
let &colorcolumn="81"


" ── buffer settings ───────────────────────────────────────────────────────────
autocmd bufenter * if &buftype == '' | silent! lcd %:p:h | endif


" ── update y autoread settings ────────────────────────────────────────────────
"set updatetime=1000

augroup autoread
  autocmd!
  autocmd cursorhold,cursorholdi * checktime
  autocmd focusgained,bufenter * checktime
augroup end


" ── floaterm settings ─────────────────────────────────────────────────────────
let g:floaterm_autoclose = 2
let g:floaterm_title = ' -> $1..$2'


" ── identline settings ────────────────────────────────────────────────────────
let g:indentLine_char_list = ['│']
let g:indentLine_fileTypeExclude = [ 'startify' ]


" ── lsp settings ─────────────────────────────────────────────────────────
let g:lsp_diagnostics_enabled = 1
let g:lsp_document_highlight_enabled = 1
let g:asyncomplete_auto_popup = 1

"let g:lsp_diagnostics_enabled = 0         
"let g:lsp_document_highlight_enabled = 0 
"let g:asyncomplete_auto_popup = 0    
"let g:lsp_diagnostics_enabled = 1
"let g:lsp_diagnostics_echo_cursor = 1
"let g:lsp_diagnostics_float_cursor = 1
"let g:lsp_diagnostics_virtual_text_enabled=0
"let g:lsp_diagnostics_signs_insert_mode_enabled=0
"let g:lsp_completion_documentation_enabled = 1
"let g:lsp_completion_documentation_delay = 1000
"let g:lsp_document_code_action_signs_enabled = 1
"let g:lsp_document_code_action_signs_hint = {'text': '→'}
"let g:lsp_diagnostics_signs_error = {'text': '✘'}
"let g:lsp_diagnostics_signs_warning = {'text': '‼'}
"let g:lsp_diagnostics_signs_info = {'text': 'ℹ'}
"let g:lsp_diagnostics_signs_hint = {'text': '?'}

 
" ── fzf settings ──────────────────────────────────────────────────────────────
 let g:fzf_colors =
 \ { 'fg':      ['fg', 'Normal'],
   \ 'bg':      ['bg', 'Normal'],
   \ 'hl':      ['fg', 'Comment'],
   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
   \ 'hl+':     ['fg', 'Statement'],
   \ 'info':    ['fg', 'PreProc'],
   \ 'border':  ['fg', 'Comment'],
   \ 'prompt':  ['fg', 'Conditional'],
   \ 'pointer': ['fg', 'Exception'],
   \ 'marker':  ['fg', 'Keyword'],
   \ 'spinner': ['fg', 'Label'],
   \ 'header':  ['fg', 'Comment'] }


" ── general settings ──────────────────────────────────────────────────────────
set undodir=~/.vim/undodir
set undofile
set nobackup
set autoindent
set number
set noswapfile
set encoding=utf-8
set autoread
set laststatus=2
set fileformat=unix
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
set relativenumber
set hidden
set showmatch
set hlsearch
set smartcase
set title
set showtabline=2
set cursorcolumn
set cursorline
set fillchars+=vert:│
set wildmenu
set nocompatible
set scrolloff=1
set display+=lastline
set nolangremap
filetype plugin indent on
syntax enable
set textwidth=80
set noshowmode
set wildoptions=pum
